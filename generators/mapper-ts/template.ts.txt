import { operations } from './openapi';

// eslint-disable-next-line prettier/prettier
export type HttpSuccessStatusCodes = 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207 | 208 | 209 | 210 | 211 | 212 | 213 | 214 | 215 | 216 | 217 | 218 | 219 | 220 | 221 | 222 | 223 | 224 | 225 | 226 | 227 | 228 | 229 | 230 | 231 | 232 | 233 | 234 | 235 | 236 | 237 | 238 | 239 | 240 | 241 | 242 | 243 | 244 | 245 | 246 | 247 | 248 | 249 | 250 | 251 | 252 | 253 | 254 | 255 | 256 | 257 | 258 | 259 | 260 | 261 | 262 | 263 | 264 | 265 | 266 | 267 | 268 | 269 | 270 | 271 | 272 | 273 | 274 | 275 | 276 | 277 | 278 | 279 | 280 | 281 | 282 | 283 | 284 | 285 | 286 | 287 | 288 | 289 | 290 | 291 | 292 | 293 | 294 | 295 | 296 | 297 | 298 | 299;

// async function ${id} (${params}query: operations['${id}']['parameters']['query']): Promise<operations['${id}']['responses'][200]['content']['application/json']> {
type KeysWithUnknownValues<T> = {
  [K in keyof T]: unknown extends T[K] ? K : never;
}[keyof T];

export type ResponseCodesByOperationId<Id extends keyof operations> = operations[Id] extends {
  responses: unknown;
}
  ? Exclude<keyof operations[Id]['responses'], 'default'>
  : undefined;

type Query<Id extends keyof operations> = operations[Id] extends { parameters: unknown }
  ? operations[Id]['parameters'] extends { query: unknown }
    ? operations[Id]['parameters']['query']
    : undefined
  : undefined;

type Params<Id extends keyof operations> = operations[Id] extends { parameters: unknown }
  ? operations[Id]['parameters'] extends { path: unknown }
    ? operations[Id]['parameters']['path']
    : undefined
  : undefined;

type Body<Id extends keyof operations> = operations[Id] extends {
  requestBody: unknown;
}
  ? operations[Id]['requestBody'] extends {
      content: { 'application/json': unknown };
    }
    ? operations[Id]['requestBody']['content']['application/json']
    : undefined
  : undefined;

type Response<Id extends keyof operations> = operations[Id] extends {
  responses: unknown;
}
  ? operations[Id]['responses'][Exclude<
      keyof operations[Id]['responses'],
      KeysWithUnknownValues<operations[Id]['responses']>
    >] extends {
      content: { 'application/json': unknown };
    }
    ? operations[Id]['responses'][Exclude<
        keyof operations[Id]['responses'],
        KeysWithUnknownValues<operations[Id]['responses']>
      >]['content']['application/json']
    : undefined
  : undefined;

type ResponseByStatus<
  Id extends keyof operations,
  status extends ResponseCodesByOperationId<Id>
> = operations[Id] extends {
  responses: unknown;
}
  ? operations[Id]['responses'][status] extends {
      content: { 'application/json': unknown };
    }
    ? operations[Id]['responses'][status]['content']['application/json']
    : undefined
  : undefined;

type RequestConfig<Id extends keyof operations> = (Partial<Params<Id>> extends Params<Id>
  ? { params?: Params<Id> }
  : { params: Params<Id> }) &
  (Partial<Query<Id>> extends Query<Id> ? { query?: Query<Id> } : { query: Query<Id> }) &
  (Partial<Body<Id>> extends Body<Id> ? { body?: Body<Id> } : { body: Body<Id> });

export type Operation<Id extends keyof operations> = Partial<RequestConfig<Id>> extends RequestConfig<Id>
  ? (
      config?: RequestConfig<Id>
    ) => Promise<ResponseByStatus<Id, HttpSuccessStatusCodes & ResponseCodesByOperationId<Id>>>
  : (
      config: RequestConfig<Id>
    ) => Promise<ResponseByStatus<Id, HttpSuccessStatusCodes & ResponseCodesByOperationId<Id>>>;
